-----BEGIN PGP SIGNED MESSAGE-----

Content-Type: message/rfc822

X-Mailer: exmh version 1.6.9 8/22/96
To: Fergus Henderson <fjh@cs.mu.oz.au>
Folders: fjh comp/std/c++ tale greg_rose clamage allman
Subject: Re: pgpmoose on q.net working; sorry; new issues. [moderation admin 
 issue]
In-Reply-To: Your message of "Tue, 22 Oct 1996 16:03:35 +1000."
             <199610220603.QAA05207@mundook.cs.mu.OZ.AU> 
Cc:ULMO,clamage@eng.sun.com,tale@uu.net,allman@sendmail.org,
 Greg_Rose@sydney.sterling.com,cypherpunks@toad.com
Mime-Version: 1.0
Content-Type: text/plain

Welcome back from your vacation!

[allman: see label allman]

In message <199610220603.QAA05207@mundook.cs.mu.OZ.AU>, Fergus Henderson writes
:
>ulmo@Q.Net, you wrote:
>> 
>> B. Of course, the newsgroups with multiple moderators where only some are
>>    using PGP Moose will flag errors, but that's no big deal since those
>>    moderators already know that condition.
>   
>It is a big deal! Can you please stop mail-bombing me! ;-)
>I keep getting lots of spurious such errors.
>
>Cheers,
>	Fergus.
>
>-- 
>Fergus Henderson <fjh@cs.mu.oz.au>   |  "I have always known that the pursuit
>WWW: <http://www.cs.mu.oz.au/~fjh>   |  of excellence is a lethal habit"
>PGP: finger fjh@128.250.37.3         |     -- the last words of T. S. Garp.

Oops, sorry.  I fixed that now.

cc'd to the innocent (who could upgrade to the new method if they chose).
Also cc'd to parties who may be interested or whom I have questions.

[Indentations according to thought nesting]

  Also, I noticed pgpverify which Tale@UU.Net started using lately for
  his control messages (newgroup, rmgroup, checkgroups).  It has some
  of the features I was requesting in PGP Moose, namely a list of
  headers which it's verifying.  His example has this header line:

    X-PGP-Sig: 2.7 Subject,Control,Message-ID,Date,From,Sender
        iQCVAgUBMXvexMJdOtO4janBAQH4iAP/Q0hvYC6b9O3db+dPZ8jBDkYmFsYvu6r0
        sJOSw9SI1vZ6VZmMcGug1g0VNTCxIFnmzpeE4o68ejTTElSY0RUPQAmvOmKejQA2
        NlQ8dspndP4MX3Z3tPSD0V0czAQ48c41SXmy3g1BukQYTKyE6jIlvFWbdLIrnJEe
        FoI101RhMns=
        =HC6t

    The nice thing with pgpverify is that one can authenticate arbitrary
    lines.  For comparison I list the PGP Moose header example here also:

    X-Auth: PGPMoose V1.0 PGP sci.crypt.research
        iQBVAgUBL1/Kg2zWcw3p062JAQEYIgH/Xyrz6LaGG+fHaSxoexMECovzkIoADrQx
        l73IXlUQEIoFl5jnDBBdHVvqTMEPS0118ytYVQZoQrdStuXB9Oc9gQ==
        =azqs

  So, potentially, there is going to be a proliferation of both
  pgpverify and PGP Moose methods of PGP authentification.  There's
  also something that comp.dcom.telecom uses.  I think the big thing
  to sit up and watch for is when some major USENET system (server or
  client; e.g., INN, trn, nn, Netscape (server or client), etc.)
  starts to authenticate either control messages or normal messages
  automatically using one or more of these methods.

    For a client to authenticate control messages (usually a CANCEL),
    it would be nice to have a cross-reference from the main message
    itself to the control message, else the newsreader client will
    have to maintain its own index of control messages automatically.
    I could see this as a feature to newsreaders already: being able
    to gauge the authenticity of a cancel message for various
    messages, organizing those messages differently on the message
    selection list, and marking them with a cancel notice, but
    allowing the user to read them as a normal message.

      This would be yet another server extension; I can see this
      feature being optional.  It would have to modify the message's
      header, perhaps adding a new field "Changed-by:" with a list of
      message-id's that somehow change it (all cancels, supersedes:
      which list it, etc.).  Or it can store this information
      per-message outside of the message.  To me the best method is to
      store it in the message, and keep the ctime/mtime of the message
      the same as its original state.

  Before and at that point, it may be a good idea to glean the good features
  of all these methods (pgpverify, pgpmoose) and put them together into
  a superset standard that can be used everywhere.

  Let me attempt to list the features that PGP Verify and PGP Moose
  have exclusively:

   PGP Moose:
     * Documentation (README) geared towards moderated mailing lists
     * Handles multiple newsgroups per article
     * Handles specific set of multiple moderators per group
     And one item that isn't exclusive to Moose but worth seeing how they
     do it:
     * Version number and header field allows for more than just PGP
       (this is a minor issue now but worth considering when working
       towards a bigger standard)

   PGP Verify:
     * Allows for list of header messages that should be authenticated.
       PGP Moose does a subset of what I think is important; e.g., look
       at comp.dcom.telecom where there are lots of X-messages that
       need authentification since they offer real information.  You can't
       guess this stuff (except perhaps to say that one should authenticate
       all X- messages (?!) plus a larger subset of the other header messages,
       but that's still guesswork in my opinion).  This flexibility is
       necessary in my opinion.

         Has this feature been thoroughly thought out where it won't
         fail in these instances?: header rewriting, reordering of
         multiple headers, whitespace changes.  I don't think
         pgpverify takes care of these instances; standard methods to
         combat each one of these should be used (to wit: replacing
         all white space with a single space; sorting multiple headers
         using ASCII as the underlying character base for sorting
         purposes (VM programmers will hate me); understand a
         canonical representation of multiply representable parsable
         header fields,
         e.g.:
           From,To,Reply-To,Return-Receipt-To:,etc.:
             I'm sorry, but to properly canonicalize one of these
             fields, one needs a full RFC822 mailer library available,
             and add a few functions to it.  Is this a requirement
allman:
             we're ready to do (e.g., tell Eric Allman to turn
             sendmail into a .so library?)  Either do it right or
             don't do it at all in my opinion: these fields just
             simply should not be rewritten by *any* USENET passing
             software and should be checked as-is.  Much simpler all
             around.  The alternative, while workable (a .so library)
             is so complex I'm sure no half-assed programmer will ever
             get it right (which doesn't mean it shouldn't be done,
             only who's going to do it?)
           Date:
             Turn it onto the number of seconds since some epoch in
             universal time (how about picking 00:00:00 GMT, January
             1, 1970?), represented in normal signed integer arabic
             base ten notation with no + (only - for dates before the
             epoch).  So it would become e.g. Date: 846025314.  The
             standard shouldn't dictate that this integer be limited
             to 32 bits since in 2038 it wouldn't work any more;
             indeed, this number should be at least 34 bits or so, if
             not longer.  Implementations are free to be poorly done
             and break in our lifetimes, though.  This transformation
             also takes time, and it should be considered whether to
             dictate that these fields not be munged either by *any*
             USENET passing software.
         )

  Other features desirable:
    * See above for thoughts on integrating this stuff into the USENET
      software.
    * Key management.  With 20,000 USENET groups, automatic stuff should have
      some reasonable key management.  Tale says not to distribute new
      keys in pgpverify messages.  Um, how else is there to do it?
      Non-authenticated?  Yeah right.  Anyway, this issue needs to be
      addressed.  Perhaps a new control message, requiring pgpverify,
      for key manipulation.  Also, adding to the standard of the
      newgroup processing (in a backward compatible way) to specify
      the PGP Moose-like list of moderators and their keys for a group
      would be important.
        NOTE!!  The security flaw in both PGP Moose and PGP Verify
        where the PGP public key comment field is used in the chain of
        authentification would have to be fixed (i.e., use both the
        comment field *and* the PGP key ID since the key ID is nearly
        impossible to forge; this impossibility must *also* be updated
        & upgraded along with keysize, sigh, so make way for at least
        some size change in this key ID).  Right now this security
        flaw isn't important since USENET maintainers manually update
        their public key databases and other authentification
        databases, and therefore have full control over the elements
        which make up an attack based on this, and therefore this
        isn't an issue.  But it will be in the future.  This needs fixing
        in both standards for future operation.
    * People ought to be able to put an authentifiable cookie onto their
      message which only they are capable of authenticating and which
      USENET software will honor as a valid cancelation.  Once again,
      the validity of the cancelation should be a complex
      hierarchical entity which takes into account the
      authentifiability of a set of various entities namely: author of
      message; moderator of posted group(s); guardian of posted
      group(s); various watchdog entities (who would offer suggested
      spam cancelations or other watchdog activities); random;
      roughly in that order.  The line would be drawn whereby authors
      and moderators have full control of their respective domains
      (their article or their newsgroup), and the software would
      immediately honor the request globally (i.e., server-wide, the
      message would be removed or placed in a cancelation area for
      further debugging), and others, notably those cancelations made
      by watchdog entities, would be simply suggested cancelations
      that server software would not act upon except extensions to
      crossreference them for easier parsing by reader clients which
      would give the user configurability abilities.  Cancelations of
      this nature, while judgemental, should nonetheless be reserved
      for actual missappropriate postings, not those postings one
      person doesn't agree with, i.e., cancel spams, or binaries in
      non-binaries groups, etc.  Nothing political.
    * Somewhere, a scoring system will come into place.  That is where
      all the politics, emotional disagreement, argumentative
      disagreement is *allowed* to take place (although I argue that
      the best scorers would not stoop to such levels).  There are a few
      scoring systems out there.  While the scope of this document only
      touches upon them, I don't have time to research them, but only to
      offer ideas about the scoring systems:
      * News clients and servers that support scoring systems should and
        probably will be able to use similar methods and mechanisms and
        subroutines to support the above authentification (message, cancel,
        group maintenance, etc.) as with the scoring system itself.
      * Scoring systems ought to themselves have security of effective
        measure (possibly strong authentification as above) for the
        scores.  Nothing is safe from attack, even scores.  (One
        scoring method might simply be messages themselves; perhaps
        another standard newsgroup could be tacked onto the newsgroup
        list, like "...,sci.med.aids.Score" or something.  However,
        there are plenty of scoring mechanisms out there, and
        nothing's to say that a less-than-article scoring system won't
        be effective in some areas, and security should still be
        considered with them anew.)  Once again, scoring routines ought
        to be able to share code with the above authentification codes.
    * Other cryptosystem support.  I.e., when better methods than PGP
      come out.  E.g., PGP has computation-time attacks, something
      this system would open things up to a lot!  This has to be
      worked on.

Tale and Greg, I'd like to muddle with your scripts and offer them
back to you and want your thoughts on how to proceed, and what your
short, medium and long term ideas of the above are.  More than
anything, I'd like to know where this stuff is being discussed
seriously.  cc'd to cypherpunks mailing list (I'm not on it (well, I
just sent a subscription), cc replies directly to me if at possible).

Thanks much,
Bradley Allen <Ulmo@Q.Net>

-----BEGIN PGP SIGNATURE-----
Version: 2.6.2

iQEVAwUBMm2N95xWhFYc6x9VAQHTAQgA2Lk9Q1yEvcXqks6FXmAC0HrFaF+LjJnd
p+jwgnGrvRmORviCGAkA39T2hop4chc8p8xdPYDNk2zfrvQOs3wc0+t8AuGjntzV
2V/s05w1lKExTqNQP3TtR1kjhtc1YjSADuhEYolWBbYFTF4aoWRjWIqksMfiwvbk
+dbgdIQBThXR2rGmpFF1TEqxaAF6XKgn2zLlpJpWohxXc7uxz/cmAyZ1PrWfy00y
/6amleVgWSvy50uw2x2Ph9nvGO02gs4kk2MUc6HGwM/WWE5cAmLI0wNCOR5HpzT0
X6j/gAyDArcuXX7IxRx+/G8xNFVI9Q88Net6qNGZ1CXhePhX1AzvRw==
=Dyhd
-----END PGP SIGNATURE-----

